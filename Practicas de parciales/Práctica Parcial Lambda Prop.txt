module Library where
import PdePreludat
import Prelude (Int)

type Requisito = Depto -> Bool
type Busqueda = [Requisito]
type Depto = (Number, Number, Number, String)
type Persona = (String, [Busqueda])

ambientes (a, _,_,_) =a
superficie (_,m2,_,_) = m2
precio (_,_,p,_)= p
barrio (_,_,_,b) = b

mail persona = fst persona
busquedas persona = snd persona

ordenarSegun :: (a -> a -> Bool) -> [a] -> [a]
ordenarSegun _ [] = []
ordenarSegun criterio (x:xs) = (ordenarSegun criterio.filter (not.criterio x)) xs ++ [x] ++ (ordenarSegun criterio.filter (criterio x)) xs

between x y z = x <= z && y >= z

deptosDeEjemplo = [(3,80,7500,"Palermo"), (1,45,3500,"Villa Urquiza"), (2,50,5000,"Palermo"), (1,45,5500,"Recoleta")]

mayorSegun funcion valor1 valor2 = (> (funcion valor2)) (funcion valor1)

ubicadoEn :: [String] -> Depto -> Bool
ubicadoEn listaBarrios unDepto = elem (barrio unDepto) listaBarrios

cumpleRango :: (Depto -> Number) -> Number -> Number  -> Depto -> Bool
cumpleRango funcion n1 n2 unDepto= ((>=n1).funcion) unDepto && ((<=n2).funcion) unDepto

cumpleBusqueda :: Busqueda -> Depto -> Bool
cumpleBusqueda listaRequisitos unDepto = all (flip ($) unDepto) listaRequisitos

cumpleBusquedaOrdenados :: [Depto] -> Busqueda -> (Depto -> Depto -> Bool) -> [Depto]
cumpleBusquedaOrdenados listaDepto listaRequisitos unCriterio = (ordenarSegun unCriterio . filter (cumpleBusqueda listaRequisitos)) listaDepto


busqueda1 = [ubicadoEn ["Recoleta","Palermo"],cumpleRango ambientes 1 2, cumpleRango precio 0 6000]

criterio1 :: Depto -> Depto -> Bool
criterio1 unDepto otroDepto = mayorSegun superficie unDepto otroDepto

cumpleAlgunaBusqueda :: Depto -> Persona -> Bool
cumpleAlgunaBusqueda unDepto unaPersona = any (flip (cumpleBusqueda) unDepto) (busquedas unaPersona) 

mailDePersonasInteresadas :: Depto -> [Persona] -> [String]
mailDePersonasInteresadas unDepto listaPersonas = (map mail. filter (cumpleAlgunaBusqueda unDepto)) listaPersonas