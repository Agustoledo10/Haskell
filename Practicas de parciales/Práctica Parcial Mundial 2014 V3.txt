module Library where
import PdePreludat
import Prelude (Int)

data Jugador = Jugador{
nombre :: String,
edad :: Number,
promedioGol :: Number,
habilidad :: Number,
cansancio :: Number
} deriving (Show,Eq)

martin = Jugador "Martin" 26 0.0 50 35.0
juan = Jugador "Juancho" 30 0.2 50 40.0
maxi = Jugador "Maxi Lopez" 27 0.4 68 30.0

jonathan = Jugador "Chueco" 20 1.5 80 99.0
lean = Jugador "Hacha" 23 0.01 50 35.0
brian = Jugador "Panadero" 21 5 80 15.0

garcia = Jugador "Sargento" 30 1 80 13.0
messi = Jugador "Pulga" 26 10 99 43.0
aguero = Jugador "Aguero" 24 5 90 5.0

type Equipo = (String,Char,[Jugador])

nombreEquipo :: Equipo -> String
nombreEquipo (n,_,_) = n

grupoEquipo :: Equipo -> Char
grupoEquipo (_,g,_) = g

jugadoresEquipo :: Equipo -> [Jugador]
jugadoresEquipo (_,_,j) = j

equipo1 = ("Lo Que Vale Es El Intento", 'F', [martin, juan, maxi])
losDeSiempre = ( "Los De Siempre", 'F', [jonathan, lean, brian])
restoDelMundo = ("Resto del Mundo", 'A', [garcia, messi, aguero])

quickSort _ [] = [] 
quickSort criterio (x:xs) = (quickSort criterio . filter (not . criterio x)) xs ++ [x] ++ (quickSort criterio . filter (criterio x)) xs 

aspectoMayorA :: (Jugador -> Number) -> Number -> Jugador -> Bool
aspectoMayorA unAspecto unNumero unJugador = ((>unNumero) . unAspecto) unJugador

esJugadorFigura :: Jugador -> Bool
esJugadorFigura unJugador = aspectoMayorA habilidad 75 unJugador && aspectoMayorA promedioGol 0 unJugador

jugadoresFigura :: Equipo -> [Jugador]
jugadoresFigura unEquipo = (filter (esJugadorFigura) . jugadoresEquipo) unEquipo

jugadoresFaranduleros = ["Maxi Lopez", "Icardi", "Aguero", "Caniggia", "Demichelis"]

esFarandulero :: Jugador -> Bool
esFarandulero unJugador = elem (nombre unJugador) jugadoresFaranduleros

tieneFarandulero :: Equipo -> Bool
tieneFarandulero unEquipo = (any (esFarandulero) . jugadoresEquipo) unEquipo

perteneceGrupo :: Char -> Equipo -> Bool
perteneceGrupo unGrupo unEquipo = ((== unGrupo) . grupoEquipo) unEquipo

jugadoresDelGrupo :: [Equipo] -> [Jugador]
jugadoresDelGrupo listaEquipos = (concat . map jugadoresEquipo) listaEquipos

esJoven :: Jugador -> Bool
esJoven unJugador = ((<27).edad) unJugador

esFiguritaDificil :: Jugador -> Bool
esFiguritaDificil unJugador = esJugadorFigura unJugador && esJoven unJugador && (not.esFarandulero) unJugador

figuritasDificilGrupo :: Char -> [Equipo] -> [String]
figuritasDificilGrupo unGrupo listaEquipos = (map nombre .filter esFiguritaDificil . jugadoresDelGrupo . filter (perteneceGrupo unGrupo)) listaEquipos

modificarCansancio :: Jugador -> (Number -> Number) -> Jugador
modificarCansancio unJugador unaFuncion = unJugador { cansancio = unaFuncion (cansancio unJugador) }

{--Si el jugador no es farandulero, es joven y figura, su cansancio pasa a ser 50.
Para el resto de los jugadores jÃ³venes, su cansancio aumenta un 10%.
Si el jugador no es joven y es figura del equipo se incrementa en 20 unidades su cansancio. --}

establecerEn :: Number -> Number -> Number 
establecerEn nuevoCansancio unCansancio = nuevoCansancio

incrementoPorcentual :: Number -> Number -> Number
incrementoPorcentual unPorcentaje unCansancio = unCansancio + (((/100).(*unCansancio)) unPorcentaje)

jugarPartidoJugador :: Jugador -> Jugador
jugarPartidoJugador unJugador | (not.esFarandulero) unJugador && esJoven unJugador && esJugadorFigura unJugador = modificarCansancio unJugador (establecerEn 50) 
                              | esJoven unJugador = modificarCansancio unJugador (incrementoPorcentual 10)
                              | (not.esJoven) unJugador && esJugadorFigura unJugador = modificarCansancio unJugador (+20)
                              | otherwise = modificarCansancio unJugador (*2)

jugarPartidoEquipo :: Equipo -> Equipo
jugarPartidoEquipo unEquipo = (nombreEquipo unEquipo,grupoEquipo unEquipo,(map jugarPartidoJugador . jugadoresEquipo) unEquipo)

promedioGolEquipo :: Equipo -> Number
promedioGolEquipo unEquipo = (sum . map promedioGol . take 11 . quickSort ordenarCansancio . jugadoresEquipo) unEquipo

ganadorPartido :: Equipo -> Equipo -> Equipo
ganadorPartido unEquipo otroEquipo | promedioGolEquipo unEquipo > promedioGolEquipo otroEquipo = jugarPartidoEquipo unEquipo
                                   | otherwise = jugarPartidoEquipo otroEquipo

ordenarCansancio :: Jugador -> Jugador -> Bool
ordenarCansancio unJugador otroJugador = (cansancio unJugador) < (cansancio otroJugador)

campeonTorneo :: [Equipo] -> Equipo
campeonTorneo listaEquipos = foldl1 (ganadorPartido) listaEquipos

jugadorGrosso :: [Equipo] -> String
jugadorGrosso listaEquipos =  (nombre . head . filter esJugadorFigura . jugadoresEquipo . campeonTorneo) listaEquipos

