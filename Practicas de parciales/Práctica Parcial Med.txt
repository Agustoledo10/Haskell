module Library where
import PdePreludat
import Prelude (Int)
import Prelude (Float)

type Bien = (String,Number)

type Ciudad = [Ciudadano]

data Ciudadano = Ciudadano {profesion :: String, sueldo :: Number,

cantidadDeHijos :: Number, bienes :: [Bien] } deriving Show

homero :: Ciudadano
homero = Ciudadano "SeguridadNuclear" 9000 3 [("casa",50000), ("deuda",-70000)]

frink :: Ciudadano
frink = Ciudadano "Profesor" 12000 1 []

krabappel :: Ciudadano
krabappel = Ciudadano "Profesor" 12000 0 [("casa",35000)]

burns :: Ciudadano
burns = Ciudadano "Empresario" 300000 1 [("empresa",1000000),("empresa",500000),("auto",200000)]

springfield :: Ciudad
springfield = [homero, burns, frink, krabappel]

maximoSegun _ [a] = a
maximoSegun f (x:y:ys) | f x > f y = maximoSegun f (x:ys)
                       | otherwise = maximoSegun f (y:ys)

patrimonioCiudadano :: Ciudadano -> Number
patrimonioCiudadano unCiudadano = ((+ (sueldo unCiudadano)) . sum . map snd . bienes) unCiudadano

diferenciaDePatrimonio :: Ciudad -> Number
diferenciaDePatrimonio unaCiudad = (patrimonioCiudadano . maximoSegun (patrimonioCiudadano)) unaCiudad - (patrimonioCiudadano . maximoSegun (negate . patrimonioCiudadano)) unaCiudad

type Medida = Ciudadano -> Ciudadano

restarASueldo :: Number -> Number -> Number
restarASueldo resta total = max 0 (total - resta)

porcentaje :: Number -> Number -> Number
porcentaje unPorcentaje unTotal = ((/100) . (*unTotal)) unPorcentaje

modificarSueldo :: (Number -> Number) -> Ciudadano -> Ciudadano
modificarSueldo unaModificacion unCiudadano = unCiudadano { sueldo = (unaModificacion . sueldo) unCiudadano}

impuestoGanancias :: Number -> Medida
impuestoGanancias unSueldoMinimo unCiudadano | ((>unSueldoMinimo) . sueldo) unCiudadano = modificarSueldo (restarASueldo . porcentaje 30 . flip (-) unSueldoMinimo . sueldo $ unCiudadano) unCiudadano
                                             | otherwise = unCiudadano

tipoBien :: Bien -> String
tipoBien = fst

valorBien :: Bien -> Number
valorBien = snd

esAltaGama :: Bien -> Bool
esAltaGama unAuto = ((>100000) . valorBien) unAuto

tieneAutoAltaGama :: Ciudadano -> Bool
tieneAutoAltaGama unCiudadano = (any (esAltaGama) . filter ((=="auto") . tipoBien) . bienes) unCiudadano 

asignacionUniversalHijo :: Medida
asignacionUniversalHijo unCiudadano | ((<0) . patrimonioCiudadano) unCiudadano = modificarSueldo (+((*1000) . cantidadDeHijos $ unCiudadano)) unCiudadano
                                    | otherwise = unCiudadano

autoMayorValor :: Ciudadano -> Bien
autoMayorValor unCiudadano = maximoSegun valorBien . filter ((=="auto") . tipoBien) . bienes $ unCiudadano

impuestoAltaGama ::Medida
impuestoAltaGama unCiudadano | tieneAutoAltaGama unCiudadano = modificarSueldo (restarASueldo . porcentaje 10 . valorBien . autoMayorValor $ unCiudadano) unCiudadano
                             | otherwise = unCiudadano

negociarSueldoProfesion :: Number -> String -> Medida
negociarSueldoProfesion unPorcentaje unaProfesion unCiudadano | ((== unaProfesion) . profesion) unCiudadano = modificarSueldo ((+) (porcentaje unPorcentaje . sueldo $ unCiudadano)) unCiudadano
                                                              | otherwise = unCiudadano


data Gobierno = Gobierno {
aniosGobierno :: [Number],
listaMedidas:: [ Ciudadano->Ciudadano ]
} deriving (Show,Eq)

gobiernoA :: Gobierno
gobiernoA = Gobierno [1999..2003] [impuestoGanancias 30000, negociarSueldoProfesion 10 "Profesor", negociarSueldoProfesion 40 "Empresario",impuestoAltaGama,asignacionUniversalHijo]

gobiernoB :: Gobierno
gobiernoB = Gobierno [2004.2008] [impuestoGanancias 40000,negociarSueldoProfesion 30 "Profesor", negociarSueldoProfesion 40 "Camionero"]

gobernarUnAnio :: Gobierno -> Ciudad -> Ciudad
gobernarUnAnio unGobierno unaCiudad = foldl (flip map) unaCiudad . listaMedidas $ unGobierno

gobernarPeriodoCompleto :: Gobierno -> Ciudad -> Ciudad
gobernarPeriodoCompleto unGobierno unaCiudad = (!!) (iterate (gobernarUnAnio unGobierno) unaCiudad) (length . aniosGobierno $ unGobierno)

distribuyoRiqueza :: Gobierno -> Ciudad -> Bool
distribuyoRiqueza unGobierno unaCiudad = (diferenciaDePatrimonio unaCiudad) < (diferenciaDePatrimonio . gobernarPeriodoCompleto unGobierno $ unaCiudad)

rosebud :: [Bien]
rosebud = zip (repeat "Rosebud")[5,10..] 

kane :: Ciudadano
kane = Ciudadano "Empresario" 100000 0 rosebud

-- gobiernoA no puede emplearse con el ciudadano kane, dado que una de sus medidas requiere de evaluar la totalidad del patrimonio del ciudadano, para determinar si es inferior a 0
-- y asi otorgarle un bono, y nunca terminara de sumar los valores de sus bienes infinitos
-- gobiernoB en cambio puede ser usado a pesar de la lista infinita que presentea el ciudadano kane, dado que ninguna funcion debe evaluar dicho parametro,
-- y haskell funciona de manera tal que unicamente hace uso de lo que necesita













